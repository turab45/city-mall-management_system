/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.shop.frames;

import com.shop.DAO.CategoryDAO;
import com.shop.DAO.OrderDAO;
import com.shop.DAO.OrderDetailsDAO;
import com.shop.DAO.ProductDAO;
import com.shop.DAOImpl.CategoryDAOImpl;
import com.shop.DAOImpl.OrderDAOImpl;
import com.shop.DAOImpl.OrderDetailsDAOImpl;
import com.shop.DAOImpl.ProductDAOImpl;
import static com.shop.frames.AccountFrame.id;
import com.shop.model.Category;
import com.shop.model.Order;
import com.shop.model.OrderDetails;
import com.shop.model.Product;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Toolkit;
import java.util.Date;
import java.util.List;
import java.util.Random;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;

/**
 *
 * @author Turab Bajeer
 */
public class NewOrderFrame extends javax.swing.JFrame {

    /**
     * Creates new form NewOrder
     */
    Object columns[] = {"ID", "Product", "Order Code", "Selling Price", "Quantity", "Total", "Created Date", "Created By", "Modified Date", "Modified By"};
    DefaultTableModel model = new DefaultTableModel(columns, 0);

    public NewOrderFrame() {
        initComponents();

        orderedItemsTable.setRowHeight(30);
        JTableHeader header = orderedItemsTable.getTableHeader();
        header.setFont(new java.awt.Font("Tahoma", Font.BOLD, 16));

        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        setBounds(100, 100, (int) dim.getWidth(), (int) dim.getHeight());
        setLocationRelativeTo(null);

        productsTable.setRowHeight(30);
        JTableHeader header1 = productsTable.getTableHeader();
        header1.setFont(new java.awt.Font("Tahoma", Font.BOLD, 16));

        currentOrderCode = generateOrderCode();
        orderCodeLabel.setText(currentOrderCode);

        orderedItemsTable.setModel(model);

        updateButton.setEnabled(false);
        deleteButton.setEnabled(false);

        fillProductCombo();
        fillProductTable();
        fillOrderDetailsTable();
    }

    ProductDAO productDAOImpl = new ProductDAOImpl();
    OrderDAO orderDAOImpl = new OrderDAOImpl();
    OrderDetailsDAO orderDetailsDAOImpl = new OrderDetailsDAOImpl();
    CategoryDAO categoryDAOImpl = new CategoryDAOImpl();
    Product product = null;
    static Order order = null;
    static Integer id = null;
    static Integer productId = null;
    Double sellingPrice = null;
    Integer quantity = null;
    Integer orderedItemId = null;
    String orderCode = null;
    static Integer noOfTimeButtonClicked = 0;

    // current customer details
    String currentCustomerName = null;
    String currentCustomerAddress = null;
    String currentOrderCode = null;
    Order currentOrder = null;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        orderCodeLabel = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        productCombo = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        customerField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        addressField = new javax.swing.JTextArea();
        jLabel10 = new javax.swing.JLabel();
        orderDate = new org.jdesktop.swingx.JXDatePicker();
        jLabel8 = new javax.swing.JLabel();
        sellingPriceField = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        quantityField = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        grandTotal = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        cancelOrderButton = new javax.swing.JButton();
        newOrderButton = new javax.swing.JButton();
        orderNowButton = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        addButton = new javax.swing.JButton();
        resetButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        updateButton = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        orderedItemsTable = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        productsTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(0, 102, 102));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jButton1.setBackground(new java.awt.Color(0, 102, 102));
        jButton1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/shop/resources/back_50px.png"))); // NOI18N
        jButton1.setText("Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel4.setBackground(new java.awt.Color(0, 102, 102));
        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("ORDER");
        jLabel4.setOpaque(true);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 1068, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_START);

        jPanel2.setPreferredSize(new java.awt.Dimension(500, 525));
        jPanel2.setLayout(new java.awt.BorderLayout());

        jLabel3.setBackground(new java.awt.Color(255, 255, 255));
        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("ORDER");
        jLabel3.setOpaque(true);
        jPanel2.add(jLabel3, java.awt.BorderLayout.PAGE_START);

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel7.setText("Order Code");

        orderCodeLabel.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        orderCodeLabel.setForeground(new java.awt.Color(153, 0, 51));
        orderCodeLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel12.setText("Product");

        productCombo.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        productCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                productComboActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel5.setText("Customer  ");

        customerField.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        customerField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        customerField.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102)));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel6.setText("Address:");

        addressField.setColumns(20);
        addressField.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        addressField.setRows(5);
        jScrollPane3.setViewportView(addressField);

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel10.setText("Date");

        orderDate.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel8.setText("Selling Price");

        sellingPriceField.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        sellingPriceField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        sellingPriceField.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102)));
        sellingPriceField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sellingPriceFieldActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel11.setText("Quantity");

        quantityField.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        quantityField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        quantityField.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102)));
        quantityField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quantityFieldActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel9.setText("Grand Total");

        grandTotal.setBackground(new java.awt.Color(255, 255, 255));
        grandTotal.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        grandTotal.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        grandTotal.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102)));

        jPanel7.setBackground(new java.awt.Color(255, 255, 255));
        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "ORDER", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14))); // NOI18N

        cancelOrderButton.setBackground(new java.awt.Color(255, 255, 255));
        cancelOrderButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        cancelOrderButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/shop/resources/cancel_order_20px.png"))); // NOI18N
        cancelOrderButton.setText("Cancel Order");
        cancelOrderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelOrderButtonActionPerformed(evt);
            }
        });

        newOrderButton.setBackground(new java.awt.Color(255, 255, 255));
        newOrderButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        newOrderButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/shop/resources/new Order_20px.png"))); // NOI18N
        newOrderButton.setText("New Order");
        newOrderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newOrderButtonActionPerformed(evt);
            }
        });

        orderNowButton.setBackground(new java.awt.Color(255, 255, 255));
        orderNowButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        orderNowButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/shop/resources/order now_20px.png"))); // NOI18N
        orderNowButton.setText("Order Now");
        orderNowButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                orderNowButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(newOrderButton, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(orderNowButton, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cancelOrderButton, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(newOrderButton, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(9, 9, 9)
                .addComponent(orderNowButton, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14)
                .addComponent(cancelOrderButton, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel8.setBackground(new java.awt.Color(255, 255, 255));
        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "ITEMS", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14))); // NOI18N

        addButton.setBackground(new java.awt.Color(255, 255, 255));
        addButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        addButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/shop/resources/add_20px.png"))); // NOI18N
        addButton.setText("Add Item");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        resetButton.setBackground(new java.awt.Color(255, 255, 255));
        resetButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        resetButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/shop/resources/Sync_20px.png"))); // NOI18N
        resetButton.setText("Reset");
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });

        deleteButton.setBackground(new java.awt.Color(255, 255, 255));
        deleteButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        deleteButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/shop/resources/Delete Bin_20px.png"))); // NOI18N
        deleteButton.setText("Delete Item");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        updateButton.setBackground(new java.awt.Color(255, 255, 255));
        updateButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        updateButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/shop/resources/update_20px.png"))); // NOI18N
        updateButton.setText("Update Item");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(updateButton, javax.swing.GroupLayout.DEFAULT_SIZE, 184, Short.MAX_VALUE)
                    .addComponent(deleteButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(resetButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addComponent(updateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(resetButton, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(32, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jLabel7)
                        .addGap(30, 30, 30)
                        .addComponent(orderCodeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(productCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jLabel5)
                        .addGap(36, 36, 36)
                        .addComponent(customerField, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jLabel6)
                        .addGap(56, 56, 56)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41)
                        .addComponent(orderDate, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jLabel8)
                        .addGap(18, 18, 18)
                        .addComponent(sellingPriceField, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addComponent(quantityField, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jLabel9)
                        .addGap(6, 6, 6)
                        .addComponent(grandTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(25, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(orderCodeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(jLabel12))
                    .addComponent(productCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(jLabel5))
                    .addComponent(customerField, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(jLabel10))
                    .addComponent(orderDate, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(sellingPriceField, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel11)
                    .addComponent(quantityField, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(grandTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(100, Short.MAX_VALUE))
        );

        jPanel2.add(jPanel6, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel2, java.awt.BorderLayout.LINE_START);

        jPanel3.setLayout(new java.awt.BorderLayout());

        jPanel4.setPreferredSize(new java.awt.Dimension(719, 400));
        jPanel4.setLayout(new java.awt.BorderLayout(0, 5));

        jLabel2.setBackground(new java.awt.Color(255, 255, 255));
        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Ordered Items");
        jLabel2.setOpaque(true);
        jPanel4.add(jLabel2, java.awt.BorderLayout.PAGE_START);

        jScrollPane1.setBackground(new java.awt.Color(255, 255, 255));

        orderedItemsTable.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        orderedItemsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        orderedItemsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                orderedItemsTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(orderedItemsTable);

        jPanel4.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel3.add(jPanel4, java.awt.BorderLayout.PAGE_START);

        jPanel5.setLayout(new java.awt.BorderLayout(5, 0));

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Available Products");
        jPanel5.add(jLabel1, java.awt.BorderLayout.PAGE_START);

        jScrollPane2.setBackground(new java.awt.Color(255, 255, 255));

        productsTable.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        productsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(productsTable);

        jPanel5.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jPanel3.add(jPanel5, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel3, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void sellingPriceFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sellingPriceFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sellingPriceFieldActionPerformed

    private void quantityFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quantityFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_quantityFieldActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed

        if (customerField.getText().equals("") || addressField.getText().equals("") || quantityField.getText().equals("")) {

            JOptionPane.showMessageDialog(null, "Required details are not enough!", "Please fill all the fields!", 0);

        } else {

            noOfTimeButtonClicked+=1;
            currentCustomerName = customerField.getText().toString();
            currentCustomerAddress = addressField.getText().toString();

            OrderDetails odt = new OrderDetails();

            sellingPrice = Double.valueOf(sellingPriceField.getText());

            quantity = Integer.valueOf(quantityField.getText());

            if (productDAOImpl.productQuantity(product.getProductID()) >= quantity) {

                       addItemToCart(noOfTimeButtonClicked);
                       clearFields();
                       grandTotal.setText(getGrandTotal().toString());


            }else{
            
                JOptionPane.showMessageDialog(null, "Required quantity is not available!, availale quantity is "+productDAOImpl.productQuantity(product.getProductID()), "Item quantity exceed!", JOptionPane.WARNING_MESSAGE);
            }
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void productComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_productComboActionPerformed

        if (productCombo.getSelectedIndex() == 0) {

        } else {
            String productName = productCombo.getSelectedItem().toString();
            productId = productDAOImpl.getProductIDByName(productName);

            Product p = productDAOImpl.getProductByID(productId);
            product = p;
            sellingPriceField.setText(p.getPrice().toString());
        }
    }//GEN-LAST:event_productComboActionPerformed

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        clearFields();
        fillOrderDetailsTable();
        fillProductTable();
    }//GEN-LAST:event_resetButtonActionPerformed

    private void orderNowButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_orderNowButtonActionPerformed
        if (orderedItemsTable.getRowCount() == 0) {
            JOptionPane.showMessageDialog(null, "You don't have any items to buy!, please add items.", "No items found", JOptionPane.WARNING_MESSAGE);
        } else {

            int r = addCartItemsToDatabase();
            if(r > 0){System.out.println("Successfull");}
            currentOrder = new Order();
            currentOrder.setOrderCode(currentOrderCode);
            currentOrder.setOrderDate(new Date());
            currentOrder.setGrandTotal(getGrandTotal());
            currentOrder.setCustomerName(currentCustomerName);
            currentOrder.setCustomerAddress(currentCustomerAddress);
            currentOrder.setCreatedDate(new Date());
            currentOrder.setCreatedBy(0);

            order = currentOrder;
            
            int result = orderDAOImpl.addOrder(currentOrder);

            if (result > 0) {
                new PaymentDialog(null, true).setVisible(true);
                JOptionPane.showMessageDialog(null, "Order Successfull!");
                currentOrderCode = generateOrderCode();
                orderCodeLabel.setText(currentOrderCode);
                
                new NewOrderFrame().setVisible(true);
                this.dispose();
                fillOrderDetailsTable();
                fillProductTable();
                clearFields();
                grandTotal.setText(getGrandTotal().toString());
            } else {
                JOptionPane.showMessageDialog(null, "Error in Order", "Error", JOptionPane.ERROR_MESSAGE);

            }

        }
    }//GEN-LAST:event_orderNowButtonActionPerformed

    private void newOrderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newOrderButtonActionPerformed
        currentOrderCode = generateOrderCode();
        orderCodeLabel.setText(currentOrderCode);
        
        fillOrderDetailsTable();
        fillProductTable();
        fillProductCombo();
    }//GEN-LAST:event_newOrderButtonActionPerformed

    private void orderedItemsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_orderedItemsTableMouseClicked
        orderedItemId = (Integer) orderedItemsTable.getValueAt(orderedItemsTable.getSelectedRow(), 0);

        if (orderedItemId != null) {

            updateButton.setEnabled(true);
            deleteButton.setEnabled(true);

            OrderDetails orderDetails = orderDetailsDAOImpl.getOrderDetailsByID(orderedItemId);
            Product p = productDAOImpl.getProductByID(orderDetails.getProduct().getProductID());

            productCombo.setSelectedItem(p.getProductName());
            sellingPriceField.setText(orderDetails.getSellingPrice().toString());
            quantityField.setText(orderDetails.getQuantity().toString());
            customerField.setText(currentCustomerName);
            addressField.setText(currentCustomerAddress);

            updateButton.setEnabled(true);
            deleteButton.setEnabled(true);
        }
    }//GEN-LAST:event_orderedItemsTableMouseClicked

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        if (customerField.getText().equals("") || addressField.getText().equals("") || quantityField.getText().equals("")) {

            JOptionPane.showMessageDialog(null, "Required details are not enough!", "Please fill all the fields!", 0);

        } else {

            currentCustomerName = customerField.getText().toString();
            currentCustomerAddress = addressField.getText().toString();

            OrderDetails odt = orderDetailsDAOImpl.getOrderDetailsByID(orderedItemId);
            int previousQuantity = odt.getQuantity();

            sellingPrice = Double.valueOf(sellingPriceField.getText());
            quantity = Integer.valueOf(quantityField.getText());

            odt.setProduct(product);
            odt.setSellingPrice(sellingPrice);
            odt.setQuantity(quantity);
            odt.setTotal(sellingPrice * quantity);
            odt.setModifiedDate(new Date());
            odt.setModifiedBy(0);

            int result2 = orderDetailsDAOImpl.updateOrderDetails(odt);

            if (previousQuantity > quantity) {
                int newQuantity = previousQuantity - quantity;
                int result = productDAOImpl.plusProduct(product, newQuantity);
            } else if (quantity > previousQuantity) {

                int newQuantity = quantity - previousQuantity;
                int result = productDAOImpl.reduceProduct(product, newQuantity);
            } else if (quantity == previousQuantity) {

                int newQuantity = previousQuantity - quantity;
                int result = productDAOImpl.reduceProduct(product, newQuantity);
            }
            if (result2 > 0) {
                JOptionPane.showMessageDialog(null, "Item updated!");
                orderCode = generateOrderCode();
                fillOrderDetailsTable();
                fillProductTable();
                clearFields();
                grandTotal.setText(getGrandTotal().toString());
            } else {
                JOptionPane.showMessageDialog(null, "Error in Order", "Error", JOptionPane.ERROR_MESSAGE);

            }

        }
    }//GEN-LAST:event_updateButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        if (customerField.getText().equals("") || addressField.getText().equals("") || quantityField.getText().equals("")) {

            JOptionPane.showMessageDialog(null, "Required details are not enough!", "Please fill all the fields!", 0);

        } else {

            OrderDetails odt = orderDetailsDAOImpl.getOrderDetailsByID(orderedItemId);
            int previousQuantity = odt.getQuantity();

            quantity = Integer.valueOf(quantityField.getText());

            int result2 = orderDetailsDAOImpl.deleteOrderDetails(orderedItemId);
            int result = productDAOImpl.plusProduct(product, previousQuantity);

            if (result2 > 0) {
                JOptionPane.showMessageDialog(null, "Item removed");
                orderCode = generateOrderCode();

                model.removeRow(orderedItemsTable.getSelectedRow());
                orderedItemsTable.clearSelection();
                fillOrderDetailsTable();
                fillProductTable();
                clearFields();
                grandTotal.setText(getGrandTotal().toString());
            } else {
                JOptionPane.showMessageDialog(null, "Error in Order", "Error", JOptionPane.ERROR_MESSAGE);

            }

        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void cancelOrderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelOrderButtonActionPerformed
        if (orderedItemsTable.getRowCount() == 0) {

            JOptionPane.showMessageDialog(null, "Create Order to cancel", "Order not found!", JOptionPane.WARNING_MESSAGE);
        } else if (orderedItemsTable.getValueAt(orderedItemsTable.getSelectedRow(), 0) == orderedItemId) {

            OrderDetails odt = orderDetailsDAOImpl.getOrderDetailsByID(orderedItemId);
            int previousQuantity = odt.getQuantity();

            quantity = Integer.valueOf(quantityField.getText());

            int result2 = orderDetailsDAOImpl.deleteOrderDetails(orderedItemId);
            int result = productDAOImpl.plusProduct(product, previousQuantity);

            if (result2 > 0) {
                JOptionPane.showMessageDialog(null, "Order canceled successfully!");
                orderCode = generateOrderCode();

                model.removeRow(orderedItemsTable.getSelectedRow());
                orderedItemsTable.clearSelection();
                fillOrderDetailsTable();
                fillProductTable();
                clearFields();
                grandTotal.setText(getGrandTotal().toString());
            } else {
                JOptionPane.showMessageDialog(null, "Error in Order Cancellation", "Error", JOptionPane.ERROR_MESSAGE);

            }
        }
    }//GEN-LAST:event_cancelOrderButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        new HomeFrame().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewOrderFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewOrderFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewOrderFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewOrderFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewOrderFrame().setVisible(true);
            }
        });
    }

    public void fillProductTable() {

        Object columns[] = {"ID", "Product", "Category", "Price", "Quantity", "Remarks", "Created Date", "Created By", "Modified Date", "Modified By"};
        DefaultTableModel model = new DefaultTableModel(columns, 0);
        List<Product> allProducts = productDAOImpl.getAllProduct();

        for (Product p : allProducts) {
            Category c = categoryDAOImpl.getCategoryByID(p.getCategory().getCategoryID());
            Object rowData[] = {p.getProductID(), p.getProductName(), c.getCategoryName(), p.getPrice(), p.getQuantity(), p.getRemarks(), p.getCreatedDate(), p.getCreatedBy(), p.getModifiedDate(), p.getModifiedBy()};

            model.addRow(rowData);
            productsTable.setModel(model);

        }
    }

    public void fillOrderDetailsTable() {

        model = new DefaultTableModel(columns, 0);
        Order ord = new Order();
        ord.setOrderCode(currentOrderCode);
        List<OrderDetails> allDetailses = orderDetailsDAOImpl.getAllDetailsOf(ord);

        for (OrderDetails odt : allDetailses) {

            Product p = productDAOImpl.getProductByID(odt.getProduct().getProductID());

            Object rowData[] = {odt.getOrderDetailID(), p.getProductName(), odt.getOrder().getOrderCode(), odt.getSellingPrice(), odt.getQuantity(), odt.getTotal(), odt.getCreatedDate(), odt.getCreatedBy(), odt.getModifiedDate(), odt.getModifiedBy()};

            model.addRow(rowData);
            orderedItemsTable.setModel(model);

        }
    }

    public void clearFields() {

        productCombo.setSelectedIndex(0);
        sellingPriceField.setText(null);
        quantityField.setText(null);

        updateButton.setEnabled(false);
        deleteButton.setEnabled(false);
    }

    static public String generateOrderCode() {

        String Capital_chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        String numbers = "0123456789";

        // Using random method 
        Random rndm_method = new Random();

        String password = "";

        for (int i = 0; i < 6; i++) {
            // Use of charAt() method : to get character value 
            // Use of nextInt() as it is scanning the value as int
            if (i == 2) {
                password += "-";
            }
            if (i == 0 || i == 1) {
                password += Capital_chars.charAt(rndm_method.nextInt(Capital_chars.length()));
            } else {
                password += numbers.charAt(rndm_method.nextInt(numbers.length()));
            }
        }
        return password;
    }

    public void fillProductCombo() {

        List<Product> allProducts = productDAOImpl.getAllProduct();
        productCombo.addItem("-- Select Product --");
        for (Product p : allProducts) {

            productCombo.addItem(p.getProductName());
        }
    }

    public Double getGrandTotal() {
        double sum = 0.0;
        if (orderedItemsTable.getModel() == null) {
        } else {

            for (int i = 0; i < orderedItemsTable.getRowCount(); i++) {

                sum += Double.parseDouble(orderedItemsTable.getValueAt(i, 5).toString());
            }

        }
        return sum;
    }

    public static Order getOrder(){
    
        return order;
    }
    
    public void addItemToCart(int num){
    
        Object rowData[] = {num, product.getProductName(), currentOrderCode, sellingPrice, quantity, quantity*sellingPrice, new Date(), "None", "None", "None"};

                    model.addRow(rowData);
                    orderedItemsTable.setModel(model);
    }
    
    public Integer addCartItemsToDatabase(){
        int returnResult = 0;
        for(int i=0; i<orderedItemsTable.getRowCount(); i++){
        
            OrderDetails odt = new OrderDetails();
            
            Order ord = new Order();
            Product p = productDAOImpl.getProductByID(productDAOImpl.getProductIDByName(orderedItemsTable.getValueAt(i, 1).toString()));
            
            Double sp = Double.valueOf(orderedItemsTable.getValueAt(i, 3).toString());
            Integer qt = Integer.valueOf(orderedItemsTable.getValueAt(i, 4).toString());
            
            ord.setOrderCode(orderedItemsTable.getValueAt(i, 2).toString());
                
            odt.setOrder(ord);
            odt.setProduct(p);
            odt.setSellingPrice(sp);
            odt.setQuantity(qt);
            odt.setTotal(sp * qt);
            odt.setCreatedDate(new Date());
            odt.setCreatedBy(0);
            
           
            Integer result = orderDetailsDAOImpl.addOrderDetails(odt);
            if(result > 0){
            int result2 = productDAOImpl.reduceProduct(p, qt);
            returnResult = 1;
            }
        }
        return returnResult;
    }

    //pulic void updateOrder

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JTextArea addressField;
    private javax.swing.JButton cancelOrderButton;
    private javax.swing.JTextField customerField;
    private javax.swing.JButton deleteButton;
    private javax.swing.JLabel grandTotal;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton newOrderButton;
    private javax.swing.JLabel orderCodeLabel;
    private org.jdesktop.swingx.JXDatePicker orderDate;
    private javax.swing.JButton orderNowButton;
    private javax.swing.JTable orderedItemsTable;
    private javax.swing.JComboBox<String> productCombo;
    private javax.swing.JTable productsTable;
    private javax.swing.JTextField quantityField;
    private javax.swing.JButton resetButton;
    private javax.swing.JTextField sellingPriceField;
    private javax.swing.JButton updateButton;
    // End of variables declaration//GEN-END:variables
}
